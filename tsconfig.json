{
  "compilerOptions": {
    // Signifies which target of JavaScript should be emitted?
    "target": "ES2015",
    // What module format should be emitted?
    "module": "ES2015",
    // See: https://github.com/Microsoft/TypeScript-Handbook/blob/master/pages/Module%20Resolution.md
    "moduleResolution": "node",
    // Output destination
    "outDir": "dist",
    // This lib uses JSX, so support it
    "jsx": "react",
    // Allow default imports from modules with no default export. This does not affect code emit, just typechecking.
    "esModuleInterop": true,
    // Don't typecheck libraries in node_modules
    "skipLibCheck": true,
    // Export type declarations and only type declrations. No extra source files to dist.
    "emitDeclarationOnly": true,
    "declaration": true,
    // Enables --noImplicitAny, --dnoImplicitThis, --alwaysStrict, --strictBindCallApply, --strictNullChecks, --strictFunctionTypes and --strictPropertyInitialization.
    "strict": false,
    // Minor style enforcements
    "noImplicitReturns": false,
    "noFallthroughCasesInSwitch": true,
    // The following can be set to false in development to make prototyping easier.
    "noUnusedLocals": true,
    "noUnusedParameters": true
  },
  "files": ["src/index.tsx"]
}
// {
//   // see https://www.typescriptlang.org/tsconfig to better understand tsconfigs
//   "include": ["src"],
//   "exclude": ["node_modules"],
//   "compilerOptions": {
//     "module": "esnext",
//     "lib": ["dom", "esnext"],
//     "importHelpers": true,
//     // output .d.ts declaration files for consumers
//     "declaration": true,
//     // output .js.map sourcemap files for consumers
//     "sourceMap": true,
//     // match output dir to input dir. e.g. dist/index instead of dist/src/index
//     "rootDir": "./src",
//     // stricter type-checking for stronger correctness. Recommended by TS
//     "strict": false,
//     // linter checks for common issues
//     "noImplicitReturns": false,
//     "noFallthroughCasesInSwitch": true,
//     // noUnused* overlap with @typescript-eslint/no-unused-vars, can disable if duplicative
//     "noUnusedLocals": true,
//     "noUnusedParameters": true,
//     // use Node's module resolution algorithm, instead of the legacy TS one
//     "moduleResolution": "node",
//     // transpile JSX to React.createElement
//     "jsx": "react",
//     // interop between ESM and CJS modules. Recommended by TS
//     "esModuleInterop": true,
//     // significant perf increase by skipping checking .d.ts files, particularly those in node_modules. Recommended by TS
//     "skipLibCheck": true,
//     // error out if import and file system have a casing mismatch. Recommended by TS
//     "forceConsistentCasingInFileNames": true,
//     // `tsdx build` ignores this option, but it is commonly used when type-checking separately with `tsc`
//     "noEmit": true
//   }
// }
